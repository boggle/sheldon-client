=== Version 1.0.17
* Changed the way subscriber favorites json gets messed up. It gets
messed up less now
* Fixed wrong subscriber favorites response expectations seitens sheldon
client

=== Version 1.0.15
* Fixed subscriber favorites traversal url

=== Version 1.0.8
* Added support for retrieving project based on similarities recommendations
from sheldon.

=== Version 1.0.5
* Connection creation throw batch operation now operates on batches of N
  elememts each time. This is like this cause seems to be the smart way of doing
  it in neo4j.

=== Version 1.0
* Method missing support has been removed.
  Methods like node.likes and node.suggestions will raise an exception,
  use node.connections(:likes) or node.connections(:suggestions).
* Exceptions are rised for response codes different to 2.X
* SheldonClient is now a module.

=== Version 0.5.24
* Rewrite subscription action to create subscription edges. Use user_node.subscribe( other_node, :all_stories )
  * Valid subscription types are :all_stories and :featured_stories
* Added node.subscription method to fetch subscriptions for a specific node
* Fetching containers for a certain node now supports :show => :all_stories or :show => :featured_stories, defaulting to :featured_stories

=== Version 0.5.21
* Allow to specify the direction in which you want the connection.( node.connection(:likes, direction: :outgoing)
* Specify direction in which you want the neighbours.( node.neighbours(:likes, :incoming)
* Add node.subscribe method.( node.subscribe(movie_node, :everything) )

=== Version 0.5.19
* Adds support for pagerank traversal urls (SheldonClient::Traverse.pagerank)
* Adds support for node containers (SheldonClient.node(2369).containers)

=== Version 0.5.6
* Adds support for user stream. (SheldonClient.stream('23235')

=== Version 0.5
* integrate elasticsearch

=== Version 0.4

* enhancements
  * Get the neighbours directly from the node with node.neighbours
  * node.connections(:likes), Fetches all the connections of type like.
  * SheldonClient.connection, single method to fetch connections, see documentation.
  * A single method for deletion

             node = SheldonClient.search( username: 'gonzo gonzales' ).first
             SheldonClient.delete(node: node )
             SheldonClient.delete(connection: node.connections(:likes).first )
             SheldonClient.delete(connection: {from: node, type:likes})

  * Fetch statistics around data stored inside sheldon with:

             SheldonClient.statistics

  * Fetch current defined sheldon schema, includes all available nodes and connections.

             SheldonClient.schema

  * Added more examples to docs/EXAMPLES.md file.

* deprecations
  * SheldonClient.fetch_neighbours
  * SheldonClient.delete_edge ( Use SheldonClient.delete )
  * SheldonClient.edge? ( Use SheldonClient.connection(from:12, to:14, type: :like )
  * SheldonClient.edge  ( Use SheldonClient.connection(123) )
  * SheldonClient.facebook_item( '123' ) ( Use SheldonClient.search( { facebook_ids: "123" })
  * SheldonClient.get_recommendations( '123' )
  * SheldonClient.get_highscores('123') (Use SheldonClient.high_scores)
  * SheldonClient.update_edge (Use SheldonClient.update(connnection: {}, payload )
  * SheldonClient.get_node_ids_of_type ( use SheldonClient.all(:users) )
  * SheldonClient.fetch_edges ( user SheldonClient.connection )



